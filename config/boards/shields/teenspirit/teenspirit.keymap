#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#define APT 0
#define NUM 1
#define NAV 2
#define SYM 3
#define FUN 4
#define ATW 5

// &lt {
//     quick_tap_ms = <160>;
// };

&caps_word {
    continue-list = <UNDERSCORE MINUS BSPC LSHFT RSHFT>;
};

/ {
    macros {
	/*
	// TODO: the following two macros only needed for mod-morphed sch
	//       or activation through different combos.
	// -> remove if unneeded!
        macro_sch: macro_sch {
            label = "Macro_sch";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap &kp S &kp C &kp H>;
	    tap-ms = <10>;
        };
        macro_shifted_sch: macro_shifted_sch {
            label = "Macro_Sch";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap &kp LS(S) &kp C &kp H>;
	    tap-ms = <10>;
        };
	// */

	// promising candidate, only problem: impossible to hold shift through
	// the activation and still have it registered as held afterwards
        macro_shiftable_sch: macro_shiftable_sch {
            label = "Macro_shiftable_sch";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <
                    &macro_tap &kp S
                    &macro_release &kp RSHIFT
                    &macro_tap &kp C &kp H
            >;
            tap-ms = <10>;
        };
    };
};


#define COMBO(NAME, BINDINGS, KEYPOS) \
combo_##NAME { \
    timeout-ms = <20>; \
    bindings = <BINDINGS>; \
    key-positions = <KEYPOS>; \
};

//#define COMBOS_TOP_ROW(LTPR, LTRM, LTMI, MTII, RTIM, RTMR, RTRP) \
//	COMBO(_ltpr, LTPR, 0 1) \
//	COMBO(_ltrm, LTRM, 1 2) \
//	COMBO(_ltmi, LTMI, 2 3) \
//	COMBO(_mtii, MTII, 3 4) \
//	COMBO(_rtim, RTIM, 4 5) \
//	COMBO(_rtmr, RTMR, 5 6) \
//	COMBO(_rtrp, RTRP, 6 7)
//#define COMBOS_BOT_ROW(LBRM, LBMI, MBII, RBIM, RBMR) \
//	COMBO(_lbrm, LBRM, 8 9) \
//	COMBO(_lbmi, LBMI, 9 10) \
//	COMBO(_mbii, MBII, 10 11) \
//	COMBO(_rbim, RBIM, 11 12) \
//	COMBO(_rbmr, RBMR, 12 13)


//  _______________________  _______________________
// |  0  |  1  |  2  |  3  \/   4 |   5 |   6 |   7 |
//       \  8  |  9  | 10  /\  11 |  12 |  13 /
//             \ 14  | 15 /  \ 16 |  17 /
//              ----------    ----------

/{
    combos {
        compatible = "zmk,combos";
//Basics	
	COMBO(esc, &kp ESC, 8 9)
	COMBO(tab, &kp TAB, 9 10)
	COMBO(tab2, &kp TAB, 0 1)
	COMBO(lenter, &kp ENTER, 8 9 10)
	COMBO(renter, &kp ENTER, 11 12 13)
	COMBO(backspace, &kp BSPC, 11 12)
	COMBO(delete, &kp DEL, 12 13)
	COMBO(bword, &kp RC(BSPC), 11 13)
//Punctuation
	COMBO(slashq, &kp SLASH, 6 7)
	COMBO(quotemark, &kp SQT, 5 7)
	COMBO(bkslash, &kp BACKSLASH, 6 13)
	COMBO(lbracket, &kp LBKT, 3 10)
	COMBO(rbracket, &kp RBKT, 4 11)
	COMBO(semi, &kp SEMI, 5 12)
//Layers
	COMBO(num-toggle, &mo NUM, 0 14)
	COMBO(num-toggle2, &mo NUM, 0 15)
	COMBO(fun-toggle, &mo FUN, 14 17)
	COMBO(fun-toggle2, &mo FUN, 15 16)
	COMBO(xtra-toggle, &mo SYM, 7 15)
	COMBO(xtra-toggle2, &mo SYM, 7 16)

/* alphas */
	             //  0+1    1+2    2+3    3+4    4+5      5+6      6+7
//	COMBOS_TOP_ROW(&kp W, &kp M, &kp B, &kp K, &kp V, &comsem, &dotcol)
//	       COMBOS_BOT_ROW(&kp F, &kp P, &kp J, &kp X, &kp Z)
	                    //  8+9   9+10  10+11  11+12  12+13

/* usually on base layer */
//        COMBO(q, &kp Q, 8 10)
//        COMBO(shiftablesch, &macro_shiftable_sch, 1 3)
        // COMBO(modmorphsch, &modmorphsch, 0 3)
        // COMBO(shiftedsch, &macro_shifted_sch, 0 3)
//        COMBO(enter, &kp ENTER, 11 13)
/* parentheticals */
//        COMBO(lt, &kp LT, 1 10)
//        COMBO(lbrc, &kp LBRC, 1 8)
//        COMBO(lbkt, &kp LBKT, 2 9)
//        COMBO(lpar, &kp LPAR, 3 10)
//        COMBO(rt, &kp GT, 6 11)
//        COMBO(rpar, &kp RPAR, 4 11)
//        COMBO(rbkt, &kp RBKT, 5 12)
//        COMBO(rbrc, &kp RBRC, 6 13)
/* caps */
//        COMBO(caps, &caps_word, 2 5)
//        COMBO(capslock, &kp CAPSLOCK, 1 6)
/* deletion */
//        COMBO(bspc, &kp BSPC, 4 6)
//        COMBO(del, &kp DEL, 5 7)
//        COMBO(delword, &kp LC(BSPC), 4 7)
    };
};

//  _______________________  _______________________
// |  0  |  1  |  2  |  3  \/   4 |   5 |   6 |   7 |
//       \  8  |  9  | 10  /\  11 |  12 |  13 /
//             \ 14  | 15 /  \ 16 |  17 /
//              ----------    ----------


/ {

    behaviors {
        hl: homerow_mods_left {
            compatible = "zmk,behavior-hold-tap";
            label = "homerow mods left";
            #binding-cells = <2>;
            // flavor = "tap-preferred";
            flavor = "balanced";
            tapping-term-ms = <150>;
            quick-tap-ms = <100>;
            // global-quick-tap;
            bindings = <&kp>, <&kp>;
            // opposite side hand keys
            hold-trigger-key-positions = <4 5 6 7 11 12 13 14 15 16 17>;
        };
        hr: homerow_mods_right {
            compatible = "zmk,behavior-hold-tap";
            label = "homerow mods right";
            #binding-cells = <2>;
            // flavor = "tap-preferred";
            flavor = "balanced";
            tapping-term-ms = <150>;
            quick-tap-ms = <100>;
            // global-quick-tap;
            bindings = <&kp>, <&kp>;
            // opposite side hand keys
            hold-trigger-key-positions = <0 1 2 3 8 9 10 14 15 16 17>;
        };

        my_lt: my_layer_taps {
            compatible = "zmk,behavior-hold-tap";
            label = "my layer taps";
            #binding-cells = <2>;
            // flavor = "tap-preferred";
            flavor = "balanced";
            tapping-term-ms = <150>;
            quick-tap-ms = <100>;
            // global-quick-tap;
            bindings = <&mo &kp>, <&kp>;
            // non-thumb keys
            // hold-trigger-key-positions = <0 1 2 3 4 5 6 7 8 9 10 11 12 13>;
        };

        dotcol: dot_colon {
            compatible = "zmk,behavior-mod-morph";
            label = "DOT_COL";
            #binding-cells = <0>;
            bindings = <&kp DOT>, <&kp COLON>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        comsem: comma_semicolon {
            compatible = "zmk,behavior-mod-morph";
            label = "COM_SEM";
            #binding-cells = <0>;
            bindings = <&kp COMMA>, <&kp SEMI>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

	/*
	// CAVE: this thing doesn't know about macro execution length,
	// so might lead to outputs like "ScH" while holding shift
	modmorphsch: modmorph_sch {
	    compatible = "zmk,behavior-mod-morph";
	    label = "MODMORPH SCH";
	    #binding-cells = <0>;
	    bindings = <&macro_sch>, <&macro_shifted_sch>;
	    mods = <(MOD_LSFT|MOD_RSFT)>;
	};
	// */
    };
};


/ {
    keymap {
        compatible = "zmk,keymap";

        aptmak {
            label = "APT";

            bindings = <
                &hl LGUI N    &hl LSHIFT R     &hl LALT T     &hl LCTRL S       &hr RCTRL H    &hr LALT A     &hr LSHIFT I     &hr LGUI E
                               &kp L          &kp D          &kp Y              &kp M          &kp O          &kp U
                                              &mo ATW	     &mo ATW  		&my_lt NAV SPACE   &my_lt NAV SPACE
            >;
        };
        numbers {
            label = "NUM";

            bindings = <
                &trans		&kp GRAVE     &kp MINUS	     &kp EQUAL          &kp N4         &kp N5         &kp N6         &kp PERIOD
                               &kp N7         &kp N8         &kp N9             &kp N1         &kp N2         &kp N3
                                              &trans         &trans             &kp N0          &kp N0
            >;
        };
        navigation {
            label = "NAV";

            bindings = <
                &kp C_MUTE     &kp PG_UP      &kp C_BRI_UP      &kp C_VOL_UP       &kp HOME       &kp UP         &kp END          &kp PSCRN
                               &kp PG_DN      &kp C_BRI_DN      &kp C_VOL_DN       &kp LEFT       &kp DOWN       &kp RIGHT
                                              &trans            &trans		       &trans         &trans
            >;
        };
        symbols {
            label = "SYM";

            bindings = <
                &kp EXCL       &kp AT         &kp HASH       &kp DOLLAR         &kp AMPERSAND  &kp ASTERISK   &kp PERCENT    &trans
                               &kp GRAVE      &kp DQT        &kp UNDERSCORE     &kp BACKSLASH  &kp PIPE       &kp EQUAL
                                              &kp TILDE      &trans             &trans         &trans
            >;
        };
        function {
            label = "FUN";

            bindings = <
                &bootloader    &kp F12        &kp F11        &kp F10            &kp F4         &kp F5         &kp F6         &none
                               &kp F9         &kp F8         &kp F7             &kp F1         &kp F2         &kp F3
                                              &trans         &trans             &trans         &trans
            >;
        };
        alphatwo {
            label = "ATW";

            bindings = <
                &kp P		&kp W         &kp B          &kp C              &kp F          &kp Z          &kp COMMA         &kp J
                               	&kp X         &kp V          &kp G              &kp K          &kp Q          &kp PERIOD
                                              &trans         &trans             &trans         &trans
            >;
        };
    };
};
